7) Write a PL/SQL block of code using parameterized Cursor Merge the data available in the newly 
created table N_RollCall with the data available in the table O_RollCall. If the data in the first table 
already exist in the second table then that data should be skipped.2. 
OUTPUT: 
SQL> CREATE TABLE O_RollCall (Roll_no INT,Name VARCHAR(20)); 
Table created. 
SQL> CREATE TABLE N_RollCall (Roll_no INT,Name VARCHAR(20)); 
Table created. 
SQL> INSERT INTO O_RollCall VALUES (1, 'Vishal'); 
1 row created. 
SQL> INSERT INTO O_RollCall VALUES (2, 'Vivek'); 
1 row created. 
SQL> INSERT INTO O_RollCall VALUES (3, 'Sam'); 
1 row created. 
SQL> INSERT INTO O_RollCall VALUES (4, 'Raj'); 
1 row created. 
SQL> INSERT INTO O_RollCall VALUES (5, 'Avi'); 
1 row created. 
SQL> INSERT INTO O_RollCall VALUES (6, 'Anu'); 
1 row created. 
 
SQL> INSERT INTO O_RollCall VALUES (7, 'Vidhi'); 
1 row created. 
 
SQL> INSERT INTO O_RollCall VALUES (8, 'Samu'); 
1 row created. 
 
SQL> select * from O_RollCall; 
   ROLL_NO NAME ---------- -------------------- 
         1 Vishal 
         2 Vivek 
         3 Sam 
         4 Raj 
         5 Avi 
         6 Anu 
         7 Vidhi 
         8 Samu 
 
8 rows selected. 
SQL> INSERT INTO N_RollCall VALUES (1, 'Vishal Updated'); 
1 row created. 
 
SQL> INSERT INTO N_RollCall VALUES (9, 'New Student'); 
1 row created. 
 
SQL> select * from N_RollCall; 
   ROLL_NO NAME 
---------- -------------------- 
         1 Vishal Updated 
         9 New Student 
 
SQL> ed 
Wrote file afiedt.buf 
  1  DECLARE 
  2      -- Parameterized cursor to fetch records from N_RollCall 
  3      CURSOR roll_call_cursor IS 
  4          SELECT Roll_no, Name FROM N_RollCall; 
  5  BEGIN 
  6      -- Open the cursor and loop through the records 
  7      FOR rec IN roll_call_cursor LOOP 
  8          -- Merge the data into O_RollCall 
  9          MERGE INTO O_RollCall o 
 10          USING (SELECT rec.Roll_no AS Roll_no, rec.Name AS Name FROM dual) n 
 11          ON (o.Roll_no = n.Roll_no) 
 12          WHEN MATCHED THEN 
 13              UPDATE SET o.Name = n.Name  -- Update the Name if Roll_no matches 
 14          WHEN NOT MATCHED THEN 
 15              INSERT (Roll_no, Name) VALUES (n.Roll_no, n.Name);  -- Insert new record 
 16      END LOOP; 
 17      -- Commit the transaction 
 18      COMMIT; 
 19      DBMS_OUTPUT.PUT_LINE('Data merged successfully from N_RollCall to O_RollCall.'); 
 20  EXCEPTION 
 21      WHEN OTHERS THEN 
 22          ROLLBACK;  -- Rollback if any error occurs 
 23          DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM); 
 24* END; 
 25  / 
Data merged successfully from N_RollCall to O_RollCall. 
PL/SQL procedure successfully completed. 
 
SQL> select * from O_RollCall; 
   ROLL_NO NAME ---------- -------------------- 
         1 Vishal Updated 
         2 Vivek 
         3 Sam 
         4 Raj 
         5 Avi 
         6 Anu 
         7 Vidhi 
         8 Samu 
         9 New Student 
9 rows selected. 
 
8) Write a PL/SQL block of Stored Procedure and Stored Function proc_Grade for following problem 
statement. Write a Stored Procedure namely proc_Grade for the categorization of student. If marks 
scored by students in examination is <=1500 and marks>=990 then student will be placed in distinction 
category if marks scored are between 989 and 900 category is first class, if marks 899 and 825 category is 
Higher Second Class. 
OUTPUT: 
SQL> CREATE TABLE Stu_Marks (Roll_no NUMBER,Name VARCHAR(20), Total_Marks NUMBER); 
Table created. 
 
SQL> CREATE TABLE Results(Roll_no NUMBER,Name VARCHAR(20),Class VARCHAR(10)); 
Table created. 
 
SQL> INSERT INTO Stu_Marks VALUES(101, 'Aviansh', 1000); 
1 row created. 
 
SQL> INSERT INTO Stu_Marks VALUES(102, 'Raj', 500); 
1 row created. 
 
SQL> INSERT INTO Stu_Marks VALUES(103, 'Ankit', 1500); 
1 row created. 
 
SQL> INSERT INTO Stu_Marks VALUES(104, 'Anu', 1200); 
1 row created. 
 
SQL> Select * from Stu_Marks; 
 
   ROLL_NO NAME                 TOTAL_MARKS ---------- -------------------- ----------- 
       101 Aviansh                     1000 
       102 Raj                             500 
       103 Ankit                         1500 
       104 Anu                           1200 
 
 
SQL> ed 
Wrote file afiedt.buf 
 
  1  CREATE OR REPLACE PROCEDURE proc_Grade AS 
  2  BEGIN 
  3      FOR rec IN (SELECT Roll_no, Name, Total_Marks FROM Stu_Marks) LOOP 
  4          DECLARE 
  5              category VARCHAR2(10);  -- Adjusted size to fit existing limit 
  6          BEGIN 
  7              -- Determine the category based on Total_Marks 
  8              IF rec.Total_Marks >= 990 AND rec.Total_Marks <= 1500 THEN 
  9                  category := 'Distnct';  -- Shortened 
 10              ELSIF rec.Total_Marks BETWEEN 900 AND 989 THEN 
 11                  category := '1st Class';  -- Shortened 
 12              ELSIF rec.Total_Marks BETWEEN 825 AND 899 THEN 
 13                  category := 'H. Sec';  -- Shortened 
 14              ELSE 
 15                  category := 'Not Cat';  -- Shortened 
 16              END IF; 
 17              -- Insert the result into the Result table 
 18              INSERT INTO Result (Roll_no, Name, Class) 
 19              VALUES (rec.Roll_no, rec.Name, category); 
 20          EXCEPTION 
 21              WHEN OTHERS THEN 
 22                  DBMS_OUTPUT.PUT_LINE('Error inserting result for Roll_no: ' || rec.Roll_no || ' - ' || 
SQLERRM); 
 23          END; 
 24      END LOOP; 
 25      COMMIT; 
 26* END; 
 27  / 
 
Procedure created. 
 
SQL> ed 
Wrote file afiedt.buf 
 
  1  DECLARE 
  2  BEGIN 
  3      -- Call the procedure to categorize students 
  4      proc_Grade; 
  5      -- Loop through the results in the Result table 
  6      FOR rec IN (SELECT Roll_no, Name, Class FROM Result) LOOP 
7          
DBMS_OUTPUT.PUT_LINE('Roll: ' || rec.Roll_no || ', Name: ' || rec.Name || ', Class: ' || rec.Class); 
8      
END LOOP; 
9  EXCEPTION 
10      WHEN NO_DATA_FOUND THEN 
11          
DBMS_OUTPUT.PUT_LINE('No records found in the Result table.'); 
12      WHEN OTHERS THEN 
13          
DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM); 
14* END; 
15  / 
Roll: 103, Name: Ankit, Class: Distnct 
Roll: 104, Name: Anu, Class: Distnct 
Roll: 102, Name: Raj, Class: Not Cat 
Roll: 101, Name: Aviansh, Class: Distnct 
PL/SQL procedure successfully completed. 
9) Write a database trigger: Row level and Statement level triggers, Before and After delete or update of 
database. Write a database trigger on Library table. The System should keep track of the records that are 
being updated or deleted. The old value of updated or deleted records should be added in Library_Audit 
table. 
OUTPUT: 
SQL> CREATE SEQUENCE Library_Audit_Sequence START WITH 1 INCREMENT BY 1 NOCACHE; 
Sequence created. 
SQL> CREATE TABLE Library (BookID INT PRIMARY KEY,Title VARCHAR(25),Author 
VARCHAR(25),PublishedYear INT); 
Table created. 
SQL> CREATE TABLE Library_Audit (AuditID INT PRIMARY KEY,BookID INT,Title VARCHAR(25),Author 
VARCHAR(25),PublishedYear INT,Action VARCHAR(10),ChangeDate DATE); 
Table created. 
 
SQL> INSERT INTO Library VALUES (1, 'Sample Book 1', 'Author 1', '2020'); 
 
1 row created. 
 
SQL> INSERT INTO Library VALUES (2, 'Sample Book 2', 'Author 2', 2018); 
 
1 row created. 
 
SQL> select * from Library; 
 
    BOOKID TITLE                     AUTHOR                    PUBLISHEDYEAR ---------- ------------------------- ------------------------- ------------- 
         1 Sample Book 1             Author 1                           2020 
         2 Sample Book 2             Author 2                           2018 
 
SQL> ed 
Wrote file afiedt.buf 
 
  1  CREATE OR REPLACE TRIGGER Library_Audit_Trigger 
  2  AFTER DELETE OR UPDATE ON Library 
  3  FOR EACH ROW 
  4  BEGIN 
  5      -- Insert audit record for DELETE operation 
  6      IF DELETING THEN 
  7          INSERT INTO Library_Audit (AuditID, BookID, Title, Author, PublishedYear, Action, ChangeDate) 
  8          VALUES (Library_Audit_Sequence.NEXTVAL, :OLD.BookID, :OLD.Title, :OLD.Author, 
:OLD.PublishedYear, 'DELETE', SYSDATE); 
  9      END IF; 
 10      -- Insert audit record for UPDATE operation 
 11      IF UPDATING THEN 
 12          INSERT INTO Library_Audit (AuditID, BookID, Title, Author, PublishedYear, Action, ChangeDate) 
 13          VALUES (Library_Audit_Sequence.NEXTVAL, :OLD.BookID, :OLD.Title, :OLD.Author, 
:OLD.PublishedYear, 'UPDATE', SYSDATE); 
 14      END IF; 
 15* END; 
 16  / 
 
Trigger created. 
 
SQL> UPDATE Library SET Title = 'Updated Book 1' WHERE BookID = 1; 
 
1 row updated. 
 
SQL> DELETE FROM Library WHERE BookID = 2; 
 
1 row deleted. 
 
SQL> 
SQL> SELECT * FROM Library_Audit; 
 
   AUDITID     BOOKID TITLE                     AUTHOR ---------- ---------- ------------------------- ------------------------- 
PUBLISHEDYEAR ACTION     CHANGEDAT ------------- ---------- --------- 
         1          1 Sample Book 1             Author 1 
         2020 UPDATE     02-NOV-24 
 
         2          2 Sample Book 2             Author 2 
         2018 DELETE     02-NOV-24 
 
10) Write a PL/SQL block of code for the following requirements:- Schema:  
Borrower(Rollin, Name, DateofIssue, NameofBook, Status)  
Fine(Roll_no, Date, Amt)  
a. Accept roll_no & name of book from user.  
b. Check the number of days (from date of issue), if days are between 15 to 30 then fine amount will be 
Rs 5per day.  
c. If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day.  
d. After submitting the book, status will change from I to R.  
e. If condition of fine is true, then details will be stored into fine table. 
OUTPUT: 
SQL> create table B_1(roll_no int,name varchar(50),dateofissue date,nameofbook varchar(100),status 
varchar(1)); 
Table created. 
SQL> create table F_1(roll_no int,F_1date date,amt int); 
Table created. 
SQL> insert into B_1 values(101,'Raj',TO_DATE('2022-10-01','YYYY-MM-DD'),'dbms','I'); 
1 row created. 
SQL> insert into B_1 values(101,'Prathamesh', TO_DATE('2022-10-15','YYYY-MM-DD'),'oop','I');  
1 row created. 
SQL> insert into B_1 values(103,'Harshada', TO_DATE('2022-09-24','YYYY-MM-DD'),'dsa','I'); 
1 row created. 
SQL> insert into B_1 values(104,'Neha', TO_DATE('2022-08-26','YYYY-MM-DD'),'cns','I'); 
1 row created. 
SQL> select*from B_1; 
ed 
SQL> select*from B_1; 
+---------+------------+-------------+------------+--------+ 
| roll_no | name       
| dateofissue | nameofbook | status | 
+---------+------------+-------------+------------+--------+ 
|     
101 | Raj        
| 2022-10-01  | dbms       
| I      
| 
|     102 | Prathamesh | 2022-10-15  | oop        | I      | 
|     103 | Harshada   | 2022-09-24  | dsa        | I      | 
|     104 | Neha       | 2022-08-26  | cns        | I      | 
+---------+------------+-------------+------------+--------+ 
4 rows in set (0.01 sec) 
 
SQL> ed 
Wrote file afiedt.buf 
 
  1  DECLARE 
  2      roll_no NUMBER; 
  3      name_of_book VARCHAR2(100); 
  4      no_of_days NUMBER; 
  5      return_date DATE := SYSDATE; 
  6      doi DATE; 
  7      fine_amount NUMBER := 0; 
  8  BEGIN 
  9      -- Accepting input from the user (simulated for this example) 
 10      roll_no := &roll_no;                -- User is prompted to enter roll_no 
 11      name_of_book := '&name_of_book';    -- User is prompted to enter name_of_book 
 12      -- Fetch the date of issue based on roll_no and name_of_book 
 13      SELECT dateofissue INTO doi 
 14      FROM B_1 
 15      WHERE roll_no = roll_no AND nameofbook = name_of_book AND status = 'I'; -- Only consider issued 
books 
 16      -- Calculate the number of days late 
 17      no_of_days := TRUNC(return_date) - TRUNC(doi); 
 18      -- Determine the fine based on the number of days 
 19      IF no_of_days > 30 THEN 
 20          fine_amount := 150 + (no_of_days - 30) * 50; -- 150 for the first 30 days 
 21      ELSIF no_of_days > 15 THEN 
 22          fine_amount := (no_of_days * 5); -- 5 per day for days between 15 and 30 
 23      END IF; 
 24      -- Output the calculated fine 
 25      dbms_output.put_line('Number of days: ' || no_of_days); 
 26      dbms_output.put_line('Fine amount: ' || fine_amount); 
 27      -- Insert the fine details into the Fine table 
 28      INSERT INTO F_1 (roll_no, F_1date, amt) VALUES (roll_no, return_date, fine_amount); 
 29      -- Update the status of the book to 'R' (returned) 
 30      UPDATE B_1 
 31      SET status = 'R' 
 32      WHERE roll_no = roll_no AND nameofbook = name_of_book; 
 33      dbms_output.put_line('Book status updated to Returned.'); 
 34  EXCEPTION 
 35      WHEN NO_DATA_FOUND THEN 
 36          dbms_output.put_line('No record found for the given roll number and book name.'); 
 37      WHEN OTHERS THEN 
 38          dbms_output.put_line('An error occurred: ' || SQLERRM); 
 39* END; 
 40  / 
Enter value for roll_no: 101 
old  10:     roll_no := &roll_no;                -- User is prompted to enter roll_no 
new  10:     roll_no := 101;                -- User is prompted to enter roll_no 
Enter value for name_of_book: dbms 
old  11:     name_of_book := '&name_of_book';    -- User is prompted to enter name_of_book 
new  11:     name_of_book := 'dbms';    -- User is prompted to enter name_of_book 
Number of days: 763 
Fine amount: 36800 
Book status updated to Returned. 
 
PL/SQL procedure successfully completed. 
 
SQL> select * from F_1; 
 
   ROLL_NO F_1DATE          AMT ---------- --------- ---------- 
       101 02-NOV-24      36800 
 
11) The organization has decided to increase the salary of employees by 10% of existing salary, whose 
existing salary is less than Rs. 10000/- Write a PL/SQ block to update the salary as per above 
requirement, display an appropriate message based on the no. of rows affected by this update (using 
implicit cursor status variables). 
OUTPUT: 
DECLARE 
    -- Variable to hold the number of rows affected 
    v_rows_updated NUMBER; 
BEGIN 
    -- Update the salary for employees with salary less than 10,000 
    UPDATE EmployeePosition 
    SET Salary = Salary * 1.10 
    WHERE Salary < 10000; 
 
    -- Get the number of rows updated 
    v_rows_updated := SQL%ROWCOUNT; 
 
    -- Display message based on the number of rows updated 
    IF v_rows_updated > 0 THEN 
        DBMS_OUTPUT.PUT_LINE(v_rows_updated || ' employee(s) salary updated successfully.'); 
    ELSE 
        DBMS_OUTPUT.PUT_LINE('No employee salaries were updated.'); 
    END IF; 
     
    -- Optionally, commit the changes if needed 
    COMMIT; 
EXCEPTION 
    WHEN OTHERS THEN 
        -- Handle any exceptions that occur 
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM); 
        ROLLBACK; -- Rollback changes in case of error 
END; 
/


29) Create the following tables :Student(roll-no, name, date-of-birth, course id)Course (Course-id, name, 
fee, duration, status) Write PL/SQL procedure to do the following :Set the status of course to "not 
offered" in which the number of candidates is less than 5 
OUTPUT: 
SQL> connect system 
Enter password: 
Connected. 
SQL> set serveroutput on; 
SQL> CREATE TABLE Course ( Course_id INT PRIMARY KEY, Name VARCHAR(100), Fee DECIMAL(10, 2), 
Duration VARCHAR(50), Status VARCHAR(20) ); 
Table created. 
SQL> CREATE TABLE Student (    Roll_no INT PRIMARY KEY,    Name VARCHAR(100),    Date_of_Birth DATE,    
Course_id INT,    FOREIGN KEY (Course_id) REFERENCES Course(Course_id)); 
Table created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (1, 'Computer Science', 50000, 
'4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (2, 'Mechanical Engineering', 
55000, '4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (3, 'Civil Engineering', 52000, '4 
Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (4, 'Electronics Engineering', 
53000, '4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (5, 'Data Science', 60000, '2 
Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (101, 'Alice Smith', 
TO_DATE('2000-05-20', 'YYYY-MM-DD'), 1); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (102, 'Bob Johnson', 
TO_DATE('2001-04-15', 'YYYY-MM-DD'), 1); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (103, 'Charlie Brown', 
TO_DATE('2000-06-10', 'YYYY-MM-DD'), 2); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (104, 'David Wilson', 
TO_DATE('2002-08-30', 'YYYY-MM-DD'), 2); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (105, 'Eve Davis', 
TO_DATE('2001-12-01', 'YYYY-MM-DD'), 3); 
1 row created. 
SQL> ed 
Wrote file afiedt.buf 
1  CREATE OR REPLACE PROCEDURE UpdateCourseStatus AS 
2  BEGIN 
3      
4      
5      
6          
UPDATE Course c 
SET Status = 'not offered' 
WHERE c.Course_id IN ( 
SELECT Course_id 
7          
FROM Student 
8          
9          
10      ); 
GROUP BY Course_id 
HAVING COUNT(*) < 5 
11      COMMIT; 
12* END; 
13  / 
Procedure created. 
SQL> ed 
Wrote file afiedt.buf 
1  BEGIN 
2      
UpdateCourseStatus; 
3* END; 
SQL> SELECT * FROM Course WHERE Status = 'not offered'; 
no rows selected 
SQL> SELECT Status, COUNT(*) AS Total FROM Course GROUP BY Status; 
STATUS                    
TOTAL -------------------- ---------- 
offered                       
5 
30) Write PL/SQL procedure to do the following :Set the status of course to "offered" in which the 
number of candidates is atleast 10 otherwise set it to "not offered" 
OUTPUT: 
SQL> connect system 
Enter password: 
Connected. 
SQL> set serveroutput on; 
SQL> CREATE TABLE Course ( Course_id INT PRIMARY KEY, Name VARCHAR(100), Fee DECIMAL(10, 2), 
Duration VARCHAR(50), Status VARCHAR(20) ); 
Table created. 
SQL> CREATE TABLE Student (    Roll_no INT PRIMARY KEY,    Name VARCHAR(100),    Date_of_Birth DATE,    
Course_id INT,    FOREIGN KEY (Course_id) REFERENCES Course(Course_id)); 
Table created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (1, 'Computer Science', 50000, 
'4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (2, 'Mechanical Engineering', 
55000, '4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (3, 'Civil Engineering', 52000, '4 
Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (4, 'Electronics Engineering', 
53000, '4 Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Course (Course_id, Name, Fee, Duration, Status) VALUES (5, 'Data Science', 60000, '2 
Years', 'offered'); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (101, 'Alice Smith', 
TO_DATE('2000-05-20', 'YYYY-MM-DD'), 1); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (102, 'Bob Johnson', 
TO_DATE('2001-04-15', 'YYYY-MM-DD'), 1); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (103, 'Charlie Brown', 
TO_DATE('2000-06-10', 'YYYY-MM-DD'), 2); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (104, 'David Wilson', 
TO_DATE('2002-08-30', 'YYYY-MM-DD'), 2); 
1 row created. 
SQL> INSERT INTO Student (Roll_no, Name, Date_of_Birth, Course_id) VALUES (105, 'Eve Davis', 
TO_DATE('2001-12-01', 'YYYY-MM-DD'), 3); 
1 row created. 
SQL> ed 
Wrote file afiedt.buf 
 CREATE OR REPLACE PROCEDURE UpdateCourseStatus AS 
 BEGIN     
UPDATE Course c 
SET c.Status = CASE 
WHEN (SELECT COUNT(*) FROM Student s WHERE s.Course_id = c.Course_id) >= 10 THEN 'offered' 
ELSE 'not offered' 
END; 
COMMIT; 
9* END; 
10  / 
Procedure created. 
SQL> ed 
Wrote file afiedt.buf 
1  BEGIN 
2      
UpdateCourseStatus; 
3* END; 
4  / 
PL/SQL procedure successfully completed. 
 
SQL> SELECT * FROM Course; 
 
 COURSE_ID ---------- 
NAME -------------------------------------------------------------------------------- 
       FEE DURATION ---------- -------------------------------------------------- 
STATUS -------------------- 
         1 
Computer Science 
     50000 4 Years 
not offered 
 
 
 COURSE_ID ---------- 
NAME -------------------------------------------------------------------------------- 
       FEE DURATION ---------- -------------------------------------------------- 
STATUS -------------------- 
         2 
Mechanical Engineering 
     55000 4 Years 
not offered 
 
 
 COURSE_ID ---------- 
NAME -------------------------------------------------------------------------------- 
       FEE DURATION ---------- -------------------------------------------------- 
STATUS -------------------- 
         3 
Civil Engineering 
     52000 4 Years 
not offered 
 
 
 COURSE_ID ---------- 
NAME -------------------------------------------------------------------------------- 
       FEE DURATION ---------- -------------------------------------------------- 
STATUS -------------------- 
         4 
Electronics Engineering 
     53000 4 Years 
not offered 
 
 
 COURSE_ID ---------- 
NAME -------------------------------------------------------------------------------- 
FEE DURATION ---------- -------------------------------------------------- 
STATUS -------------------- 
5 
Data Science 
60000 2 Years 
not offered